---

- name: "smartd: Enable and start smartd"
  ansible.builtin.lineinfile:
    dest: /etc/rc.conf
    regexp: '^\s*smartd_enable\s*=(.*)$'
    line: 'smartd_enable="YES"'
    backup: "{{ fp_backup }}"
  when: fp_smartd_enabled|bool
  notify: enable and start smartd
  tags: fp_smartd_rcconf

- name: "smartd: Disable and stop smartd"
  ansible.builtin.lineinfile:
    dest: /etc/rc.conf
    regexp: '^\s*smartd_enable\s*=(.*)$'
    line: 'smartd_enable="NO"'
    backup: "{{ fp_backup }}"
  when: not fp_smartd_enabled|bool
  notify: disable and stop smartd
  tags: fp_smartd_rcconf

- name: "smartd: Configure smartd.conf"
  ansible.builtin.lineinfile:
    dest: "{{ fp_smartd_conf_file }}"
    regexp: '^\s*DEVICESCAN(.*)$'
    state: absent
    backup: "{{ fp_backup }}"
  notify: reload smartd
  tags: fp_smartd_conf

- name: "smartd: Configure devices in {{ fp_smartd_conf_file }}"
  ansible.builtin.lineinfile:
    create: true
    dest: "{{ fp_smartd_conf_file }}"
    regexp: "{{ item.regexp }}"
    line: "{{ item.line }}"
    state: "{{ item.state|default(omit) }}"
    owner: "{{ fp_smartd_conf_owner }}"
    group: "{{ fp_smartd_conf_group }}"
    mode: "{{ fp_smartd_conf_mode }}"
    backup: "{{ fp_backup }}"
  loop: "{{ fp_smartd_devices }}"
  notify: reload smartd
  tags: fp_smartd_conf

- name: "smartd: {{ state }} smartd"
  ansible.builtin.service:
    name: smartd
    state: "{{ state }}"
  vars:
    state: "{{ fp_smartd_enabled|bool|ternary('started', 'stopped') }}"

# EOF
...
