---
- name: "Mount-img: Set facts."
  ansible.builtin.set_fact:
    _fp_mount_task: img
    _fp_mount_fstype_default: ufs
    _fp_mount_points_create: "{{ fp_mount_img_points_create }}"
    _fp_mount_entries: "{{ fp_mount_img_entries }}"
    _fp_mount_debug: "{{ fp_mount_img_debug }}"

- name: "Mount-img: Debug fp_mount_img_debug={{ fp_mount_img_debug }}"
  when: fp_mount_img_debug | bool
  vars:
    msg: |-
      _fp_mount_fstype_default: {{ _fp_mount_fstype_default }}
      _fp_mount_points_create: {{ _fp_mount_points_create }}
      _fp_mount_entries:
        {{ _fp_mount_entries | to_nice_yaml(indent=2) | indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

- name: "Mount-img: Create mount points"
  when:
    - item.state | d("mounted") == "mounted"
    - _fp_mount_points_create | bool # Note 2.
  ansible.builtin.file:
    state: directory
    path: "{{ item.mount }}"
    mode: "{{ item.dirmode | d('0755') }}"
  loop: "{{ _fp_mount_entries }}"

- name: "Mount-img: Attach memory disks"
  when: item.state | d("mounted") == "mounted"
  ansible.builtin.include_tasks:
    file: fn/mdconfig-attach-disk.yml
  loop: "{{ _fp_mount_entries }}"

- name: "Mount-img: Debug attach memory disks."
  when: _fp_mount_debug | bool
  ansible.builtin.debug:
    var: al_mdconfig_devs

  # TODO: Sanity al_mdconfig_devs[_vnode] is defined; not in check-mode

- name: "Mount-img: Mount"
  when:
    - item.state | d("mounted") == "mounted"
    - al_mdconfig_devs[_vnode] is defined
  register: result
  vars:
    _vnode: "{{ item[_fp_mount_task] }}"
  ansible.posix.mount:
    src: /dev/md{{ al_mdconfig_devs[_vnode]['unit'] }}{{ item.partition | d('') }}
    path: "{{ item.mount }}" # Note 2.
    fstype: "{{ item.fstype | d(_fp_mount_fstype_default) }}"
    opts: "{{ item.opts | d(omit) }}"
    state: mounted
    fstab: /tmp/tmp.fstab # Note 1.
  loop: "{{ _fp_mount_entries }}"

- name: "Mount-img: Debug mount."
  when: _fp_mount_debug | bool
  ansible.builtin.debug:
    var: result

- name: "Mount-img: Unmount"
  when: item.state | d("mounted") == "unmounted"
  register: result
  ansible.posix.mount:
    path: "{{ item.mount }}" # Note 2.
    state: unmounted
    fstab: /tmp/tmp.fstab # Note 1.
  loop: "{{ _fp_mount_entries }}"

- name: "Mount-img: Debug unmount."
  when: _fp_mount_debug | bool
  ansible.builtin.debug:
    var: result

- name: "Mount-img: Detach memory disks"
  when: item.state | d("mounted") == "unmounted"
  ansible.builtin.include_tasks:
    file: fn/mdconfig-detach-disk.yml
  loop: "{{ _fp_mount_entries }}"

- name: "Mount-img: Debug detach memory disks."
  when: _fp_mount_debug | bool
  ansible.builtin.debug:
    var: al_mdconfig_devs

# NOTES
# Note 1: It's not possible to mount a device without touching fstab. Temporary fstab is a
# workaround.
# https://github.com/ansible-collections/ansible.posix/issues/84#issuecomment-742420345
# Note 2: Ansible module *mount* will create/remove non-existent mountpoint

# TODO: Permanent mount entry in fstab
# state: present, absent (See ansible.posix.mount parameter *state*)
# See /etc/rc.d/mdconfig2
# Ex: mdconfig_md0="-t vnode -f /usr/local/data/vdisks/devltd.net"
# https://forums.freebsd.org/threads/mounting-vnode-backed-memory-disks-at-startup.21002/

# EOF
