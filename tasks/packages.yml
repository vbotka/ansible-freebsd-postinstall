---
- name: "Packages: Set _fp_pkg_enabled and _fp_pkg_dict for {{ ansible_architecture }}"
  vars:
    _fp_pkg_arch: "pkg_dict_{{ ansible_architecture }}"
  ansible.builtin.set_fact:
    _fp_pkg_dict: "{{ lookup('vars', _fp_pkg_arch, default=[]) |
                      items2dict(key_name='pkglist', value_name='packages') }}"
    _fp_pkg_enabled: "{{ fp_packages | selectattr('enabled') | map(attribute='list') }}"

- name: "Packages: Debug fp_packages_debug={{ fp_packages_debug }}"
  when: fp_packages_debug | bool
  vars:
    msg: |-
      ansible_architecture: {{ ansible_architecture }}
      freebsd_install_method: {{ freebsd_install_method }}
      freebsd_use_packages: {{ freebsd_use_packages | d('UNDEFINED') }}
      freebsd_install_retries: {{ freebsd_install_retries }}
      freebsd_install_delay: {{ freebsd_install_delay }}

      fp_install: {{ fp_install }}
      fp_install_delegate: {{ fp_install_delegate }}
      fp_pkg_annotation: {{ fp_pkg_annotation | d('UNDEFINED') }}
      fp_pkg_autoremove: {{ fp_pkg_autoremove | d('UNDEFINED') }}
      fp_pkg_cached: {{ fp_pkg_cached | d('UNDEFINED') }}
      fp_pkg_chroot: {{ fp_pkg_chroot | d('UNDEFINED') }}
      fp_pkg_jail: {{ fp_pkg_jail | d('UNDEFINED') }}
      fp_pkg_pkgsite: {{ fp_pkg_pkgsite | d('UNDEFINED') }}
      fp_pkg_rootdir: {{ fp_pkg_rootdir | d('UNDEFINED') }}
      fp_pkg_state: {{ fp_pkg_state | d('UNDEFINED') }}
      fp_pkg_use_globs: {{ fp_pkg_use_globs | d('UNDEFINED') }}

      apache_version: {{ apache_version | d('UNDEFINED') }}
      apache_php_version: {{ apache_php_version | d('UNDEFINED') }}
      bsd_bind_version: {{ bsd_bind_version | d('UNDEFINED') }}
      bsd_dhcp_version: {{ bsd_dhcp_version | d('UNDEFINED') }}
      bsd_gcc_version: {{ bsd_gcc_version | d('UNDEFINED') }}
      bsd_linux_version: {{ bsd_linux_version | d('UNDEFINED') }}
      bsd_mysql_version: {{ bsd_mysql_version | d('UNDEFINED') }}
      bsd_perl_version: {{ bsd_perl_version | d('UNDEFINED') }}
      bsd_php_version: {{ bsd_php_version | d('UNDEFINED') }}
      bsd_python_version: {{ bsd_python_version | d('UNDEFINED') }}
      bsd_ssl_version: {{ bsd_ssl_version | d('UNDEFINED') }}

      fp_links:
        {{ fp_links | to_yaml(indent=2) | indent(2) }}
      fp_packages:
        {{ fp_packages | to_yaml(indent=2) | indent(2) }}
      _fp_pkg_dict:
        {{ _fp_pkg_dict | to_yaml(indent=2) | indent(2) }}
  ansible.builtin.debug:
    msg: "{{ '{}'.format(msg) }}"

- name: Sanity
  block:

    - name: "Packages: Assert all items in _fp_pkg_enabled are available in _fp_pkg_dict"
      vars:
        _fp_pkg_missing: "{{ _fp_pkg_enabled | difference(_fp_pkg_dict.keys()) }}"
      ansible.builtin.assert:
        quiet: true
        that: _fp_pkg_missing | length == 0
        fail_msg: |
          [ERR] The packages list(s): {{ _fp_pkg_missing }} missing in _fp_pkg_dict

    - name: "Packages: Assert freebsd_install_method in [packages, ports]"
      ansible.builtin.assert:
        quiet: true
        that: freebsd_install_method in ['packages', 'ports']
        fail_msg: |
          [ERR] freebsd_install_method must be 'packages' or 'ports'. Is '{{ freebsd_install_method }}'

    - name: "Packages: Installation by pkgng required when fp_install_delegate"
      when: fp_install_delegate | length > 0
      ansible.builtin.assert:
        quiet: true
        that: freebsd_install_method | lower == 'packages'
        fail_msg: |
          [ERR] freebsd_install_method='packages' is required to delegate to {{ fp_install_delegate }}

    - name: "Packages: Required variable fp_pkg_jail when fp_install_delegate"
      when: fp_install_delegate | length > 0
      ansible.builtin.assert:
        quiet: true
        that: fp_pkg_jail is defined
        fail_msg: |
          [ERR] Variable fp_pkg_jail is required to delegate to {{ fp_install_delegate }}

- name: "Packages: Install packages"
  ansible.builtin.include_tasks: packages-install.yml
  loop: "{{ _fp_pkg_enabled }}"

- name: "Packages: Create symbolic links"
  tags: fp_packages_links
  ansible.builtin.file:
    src: "{{ item.target }}"
    dest: "{{ item.link }}"
    state: link
    force: true
  loop: "{{ fp_links }}"

# EOF
